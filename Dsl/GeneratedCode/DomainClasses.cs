//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainClass SoSA
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.SoSA.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.SoSA.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d71fa1e2-345f-4feb-96ad-4b831f761d85")]
	public partial class SoSA : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SoSA domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd71fa1e2, 0x345f, 0x4feb, 0x96, 0xad, 0x4b, 0x83, 0x1f, 0x76, 0x1d, 0x85);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSA(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSA(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Systematic_impact_level> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Systematic_impact_level>, Systematic_impact_level>(global::Company.Assignment_test.SoSAHasElements.SoSADomainRoleId);
			}
		}
		#endregion
		#region Concern opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Concern.
		/// Description for Company.Assignment_test.SoSAHasConcern.SoSA
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.Assignment_test.SoSAHasConcern.SoSADomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Assignment_test.Systematic_impact_level.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Assignment_test.Concern.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Assignment_test.Systematic_impact_level sourceSystematic_impact_level1 = sourceElement as global::Company.Assignment_test.Systematic_impact_level;
			if (sourceSystematic_impact_level1 != null)
			{
				// Create link for path SoSAHasElements.Elements
				this.Elements.Add(sourceSystematic_impact_level1);

				return;
			}
				
			global::Company.Assignment_test.Concern sourceConcern2 = sourceElement as global::Company.Assignment_test.Concern;
			if (sourceConcern2 != null)
			{
				// Create link for path SoSAHasConcern.Concern
				this.Concern.Add(sourceConcern2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Assignment_test.Systematic_impact_level sourceSystematic_impact_level1 = sourceElement as global::Company.Assignment_test.Systematic_impact_level;
			if (sourceSystematic_impact_level1 != null)
			{
				// Delete link for path SoSAHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.Assignment_test.SoSAHasElements.GetLinks((global::Company.Assignment_test.SoSA)this, sourceSystematic_impact_level1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Assignment_test.SoSAHasElements.SoSADomainRoleId, global::Company.Assignment_test.SoSAHasElements.ElementDomainRoleId);
				}

				return;
			}
				
			global::Company.Assignment_test.Concern sourceConcern2 = sourceElement as global::Company.Assignment_test.Concern;
			if (sourceConcern2 != null)
			{
				// Delete link for path SoSAHasConcern.Concern
				
				foreach (DslModeling::ElementLink link in global::Company.Assignment_test.SoSAHasConcern.GetLinks((global::Company.Assignment_test.SoSA)this, sourceConcern2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Assignment_test.SoSAHasConcern.SoSADomainRoleId, global::Company.Assignment_test.SoSAHasConcern.ConcernDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainClass Systematic_impact_level
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.Systematic_impact_level.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.Systematic_impact_level.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("61b26034-8d38-46f3-a11c-f09b4766c397")]
	public partial class Systematic_impact_level : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Systematic_impact_level domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x61b26034, 0x8d38, 0x46f3, 0xa1, 0x1c, 0xf0, 0x9b, 0x47, 0x66, 0xc3, 0x97);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Systematic_impact_level(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Systematic_impact_level(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3ea78053, 0xa5f7, 0x4b54, 0xb4, 0xc6, 0xc6, 0xfd, 0x49, 0xd2, 0x8d, 0x5d);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.Assignment_test.Systematic_impact_level.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.Systematic_impact_level/Name.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.Systematic_impact_level/Name.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3ea78053-a5f7-4b54-b4c6-c6fd49d28d5d")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Systematic_impact_level.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Systematic_impact_level, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Systematic_impact_level.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Systematic_impact_level.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Systematic_impact_level element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Systematic_impact_level element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SoSA opposite domain role accessor
		/// <summary>
		/// Gets or sets SoSA.
		/// </summary>
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Assignment_test.SoSAHasElements.ElementDomainRoleId) as SoSA;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Assignment_test.SoSAHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// Description for Company.Assignment_test.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Systematic_impact_level> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Systematic_impact_level>, Systematic_impact_level>(global::Company.Assignment_test.Systematic_impact_levelReferencesTargets.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// Description for Company.Assignment_test.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Systematic_impact_level> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Systematic_impact_level>, Systematic_impact_level>(global::Company.Assignment_test.Systematic_impact_levelReferencesTargets.TargetDomainRoleId);
			}
		}
		#endregion
		#region Enabling_impact_level opposite domain role accessor
		/// <summary>
		/// Gets or sets Enabling_impact_level.
		/// Description for
		/// Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Systematic_impact_level
		/// </summary>
		public virtual Enabling_impact_level Enabling_impact_level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Systematic_impact_levelDomainRoleId) as Enabling_impact_level;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Systematic_impact_levelDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Assignment_test.Enabling_impact_level.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: Systematic_impact_levelHasEnabling_impact_level.Enabling_impact_level
					if (this.Enabling_impact_level != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Assignment_test.Enabling_impact_level sourceEnabling_impact_level1 = sourceElement as global::Company.Assignment_test.Enabling_impact_level;
			if (sourceEnabling_impact_level1 != null)
			{
				// Create link for path Systematic_impact_levelHasEnabling_impact_level.Enabling_impact_level
				this.Enabling_impact_level = sourceEnabling_impact_level1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Assignment_test.Enabling_impact_level sourceEnabling_impact_level1 = sourceElement as global::Company.Assignment_test.Enabling_impact_level;
			if (sourceEnabling_impact_level1 != null)
			{
				// Delete link for path Systematic_impact_levelHasEnabling_impact_level.Enabling_impact_level
				
				foreach (DslModeling::ElementLink link in global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.GetLinks((global::Company.Assignment_test.Systematic_impact_level)this, sourceEnabling_impact_level1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Systematic_impact_levelDomainRoleId, global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Enabling_impact_levelDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainClass Enabling_impact_level
	/// Description for Company.Assignment_test.Enabling_impact_level
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.Enabling_impact_level.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.Enabling_impact_level.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d8aaa10a-ce4d-48f0-80b1-11445f49fb35")]
	public partial class Enabling_impact_level : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Enabling_impact_level domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd8aaa10a, 0xce4d, 0x48f0, 0x80, 0xb1, 0x11, 0x44, 0x5f, 0x49, 0xfb, 0x35);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Enabling_impact_level(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Enabling_impact_level(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Systematic_impact_level opposite domain role accessor
		/// <summary>
		/// Gets or sets Systematic_impact_level.
		/// Description for
		/// Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Enabling_impact_level
		/// </summary>
		public virtual Systematic_impact_level Systematic_impact_level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Enabling_impact_levelDomainRoleId) as Systematic_impact_level;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Enabling_impact_levelDomainRoleId, value);
			}
		}
		#endregion
		#region Immediate_impact_level opposite domain role accessor
		/// <summary>
		/// Gets or sets Immediate_impact_level.
		/// Description for
		/// Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Enabling_impact_level
		/// </summary>
		public virtual Immediate_impact_level Immediate_impact_level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Enabling_impact_levelDomainRoleId) as Immediate_impact_level;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Enabling_impact_levelDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Assignment_test.Immediate_impact_level.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: Enabling_impact_levelHasImmediate_impact_level.Immediate_impact_level
					if (this.Immediate_impact_level != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Assignment_test.Immediate_impact_level sourceImmediate_impact_level1 = sourceElement as global::Company.Assignment_test.Immediate_impact_level;
			if (sourceImmediate_impact_level1 != null)
			{
				// Create link for path Enabling_impact_levelHasImmediate_impact_level.Immediate_impact_level
				this.Immediate_impact_level = sourceImmediate_impact_level1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Assignment_test.Immediate_impact_level sourceImmediate_impact_level1 = sourceElement as global::Company.Assignment_test.Immediate_impact_level;
			if (sourceImmediate_impact_level1 != null)
			{
				// Delete link for path Enabling_impact_levelHasImmediate_impact_level.Immediate_impact_level
				
				foreach (DslModeling::ElementLink link in global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.GetLinks((global::Company.Assignment_test.Enabling_impact_level)this, sourceImmediate_impact_level1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Enabling_impact_levelDomainRoleId, global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Immediate_impact_levelDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainClass Immediate_impact_level
	/// Description for Company.Assignment_test.Immediate_impact_level
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.Immediate_impact_level.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.Immediate_impact_level.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a8637332-15ed-43bb-a945-f80578653d16")]
	public partial class Immediate_impact_level : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Immediate_impact_level domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa8637332, 0x15ed, 0x43bb, 0xa9, 0x45, 0xf8, 0x05, 0x78, 0x65, 0x3d, 0x16);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Immediate_impact_level(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Immediate_impact_level(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Enabling_impact_level opposite domain role accessor
		/// <summary>
		/// Gets or sets Enabling_impact_level.
		/// Description for
		/// Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Immediate_impact_level
		/// </summary>
		public virtual Enabling_impact_level Enabling_impact_level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Immediate_impact_levelDomainRoleId) as Enabling_impact_level;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Immediate_impact_levelDomainRoleId, value);
			}
		}
		#endregion
		#region Solution_name opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Solution_name.
		/// Description for
		/// Company.Assignment_test.Immediate_impact_levelHasSolution_name.Immediate_impact_level
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Solution_name> Solution_name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Solution_name>, Solution_name>(global::Company.Assignment_test.Immediate_impact_levelHasSolution_name.Immediate_impact_levelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Assignment_test.Solution_name.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Assignment_test.Solution_name sourceSolution_name1 = sourceElement as global::Company.Assignment_test.Solution_name;
			if (sourceSolution_name1 != null)
			{
				// Create link for path Immediate_impact_levelHasSolution_name.Solution_name
				this.Solution_name.Add(sourceSolution_name1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Assignment_test.Solution_name sourceSolution_name1 = sourceElement as global::Company.Assignment_test.Solution_name;
			if (sourceSolution_name1 != null)
			{
				// Delete link for path Immediate_impact_levelHasSolution_name.Solution_name
				
				foreach (DslModeling::ElementLink link in global::Company.Assignment_test.Immediate_impact_levelHasSolution_name.GetLinks((global::Company.Assignment_test.Immediate_impact_level)this, sourceSolution_name1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Assignment_test.Immediate_impact_levelHasSolution_name.Immediate_impact_levelDomainRoleId, global::Company.Assignment_test.Immediate_impact_levelHasSolution_name.Solution_nameDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainClass Solution_name
	/// Description for Company.Assignment_test.Solution_name
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.Solution_name.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.Solution_name.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("306c5a82-50ac-482a-9694-91d35880fad0")]
	public partial class Solution_name : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Solution_name domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x306c5a82, 0x50ac, 0x482a, 0x96, 0x94, 0x91, 0xd3, 0x58, 0x80, 0xfa, 0xd0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Solution_name(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Solution_name(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Immediate_impact_level opposite domain role accessor
		/// <summary>
		/// Gets or sets Immediate_impact_level.
		/// Description for
		/// Company.Assignment_test.Immediate_impact_levelHasSolution_name.Solution_name
		/// </summary>
		public virtual Immediate_impact_level Immediate_impact_level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Assignment_test.Immediate_impact_levelHasSolution_name.Solution_nameDomainRoleId) as Immediate_impact_level;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Assignment_test.Immediate_impact_levelHasSolution_name.Solution_nameDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainClass Concern
	/// Description for Company.Assignment_test.Concern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.Concern.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.Concern.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6c4e0be1-8f18-4af1-a492-7e6a2de1344f")]
	public partial class Concern : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Concern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6c4e0be1, 0x8f18, 0x4af1, 0xa4, 0x92, 0x7e, 0x6a, 0x2d, 0xe1, 0x34, 0x4f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SoSA opposite domain role accessor
		/// <summary>
		/// Gets or sets SoSA.
		/// Description for Company.Assignment_test.SoSAHasConcern.Concern
		/// </summary>
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Assignment_test.SoSAHasConcern.ConcernDomainRoleId) as SoSA;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Assignment_test.SoSAHasConcern.ConcernDomainRoleId, value);
			}
		}
		#endregion
	}
}
