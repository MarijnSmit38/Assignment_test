//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainRelationship SoSAHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.SoSAHasElements.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.SoSAHasElements.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("afc52239-08c1-498a-aa76-88ee5af9f1f5")]
	public partial class SoSAHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoSAHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xafc52239, 0x08c1, 0x498a, 0xaa, 0x76, 0x88, 0xee, 0x5a, 0xf9, 0xf1, 0xf5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoSAHasElements link in the same Partition as the given SoSA
		/// </summary>
		/// <param name="source">SoSA to use as the source of the relationship.</param>
		/// <param name="target">Systematic_impact_level to use as the target of the relationship.</param>
		public SoSAHasElements(SoSA source, Systematic_impact_level target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoSAHasElements.SoSADomainRoleId, source), new DslModeling::RoleAssignment(SoSAHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoSA domain role code
		
		/// <summary>
		/// SoSA domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoSADomainRoleId = new global::System.Guid(0xa7c6d5f6, 0xe18c, 0x4d56, 0xa5, 0x30, 0xa2, 0x48, 0x66, 0x33, 0xd8, 0xfc);
		
		/// <summary>
		/// DomainRole SoSA
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.SoSAHasElements/SoSA.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.SoSAHasElements/SoSA.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.Assignment_test.SoSAHasElements/SoSA.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a7c6d5f6-e18c-4d56-a530-a2486633d8fc")]
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoSA)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoSADomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoSADomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoSA of a Systematic_impact_level
		/// <summary>
		/// Gets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoSA GetSoSA(Systematic_impact_level element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as SoSA;
		}
		
		/// <summary>
		/// Sets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoSA(Systematic_impact_level element, SoSA newSoSA)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newSoSA);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xe1b178b2, 0x61cc, 0x45cb, 0x85, 0xc7, 0x6a, 0x00, 0xcc, 0xa4, 0x82, 0x48);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.SoSAHasElements/Element.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.SoSAHasElements/Element.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoSA", PropertyDisplayNameKey="Company.Assignment_test.SoSAHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e1b178b2-61cc-45cb-85c7-6a00cca48248")]
		public virtual Systematic_impact_level Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Systematic_impact_level)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a SoSA
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Systematic_impact_level> GetElements(SoSA element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Systematic_impact_level>, Systematic_impact_level>(element, SoSADomainRoleId);
		}
		#endregion
		#region SoSA link accessor
		/// <summary>
		/// Get the list of SoSAHasElements links to a SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.SoSAHasElements> GetLinksToElements ( global::Company.Assignment_test.SoSA soSAInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.SoSAHasElements>(soSAInstance, global::Company.Assignment_test.SoSAHasElements.SoSADomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the SoSAHasElements link to a Systematic_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.SoSAHasElements GetLinkToSoSA (global::Company.Assignment_test.Systematic_impact_level elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.SoSAHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.SoSAHasElements>(elementInstance, global::Company.Assignment_test.SoSAHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoSAHasElements instance accessors
		
		/// <summary>
		/// Get any SoSAHasElements links between a given SoSA and a Systematic_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.SoSAHasElements> GetLinks( global::Company.Assignment_test.SoSA source, global::Company.Assignment_test.Systematic_impact_level target )
		{
			global::System.Collections.Generic.List<global::Company.Assignment_test.SoSAHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.Assignment_test.SoSAHasElements>();
			global::System.Collections.Generic.IList<global::Company.Assignment_test.SoSAHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.SoSAHasElements>(source, global::Company.Assignment_test.SoSAHasElements.SoSADomainRoleId);
			foreach ( global::Company.Assignment_test.SoSAHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoSAHasElements link between a given SoSAand a Systematic_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.SoSAHasElements GetLink( global::Company.Assignment_test.SoSA source, global::Company.Assignment_test.Systematic_impact_level target )
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.SoSAHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.SoSAHasElements>(source, global::Company.Assignment_test.SoSAHasElements.SoSADomainRoleId);
			foreach ( global::Company.Assignment_test.SoSAHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainRelationship Systematic_impact_levelReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.Systematic_impact_levelReferencesTargets.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.Systematic_impact_levelReferencesTargets.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f40deaf8-6021-4356-bafb-23bffb6bdf91")]
	public partial class Systematic_impact_levelReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Systematic_impact_levelReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf40deaf8, 0x6021, 0x4356, 0xba, 0xfb, 0x23, 0xbf, 0xfb, 0x6b, 0xdf, 0x91);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Systematic_impact_levelReferencesTargets link in the same Partition as the given Systematic_impact_level
		/// </summary>
		/// <param name="source">Systematic_impact_level to use as the source of the relationship.</param>
		/// <param name="target">Systematic_impact_level to use as the target of the relationship.</param>
		public Systematic_impact_levelReferencesTargets(Systematic_impact_level source, Systematic_impact_level target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Systematic_impact_levelReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(Systematic_impact_levelReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Systematic_impact_levelReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Systematic_impact_levelReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Systematic_impact_levelReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Systematic_impact_levelReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xba4bb29a, 0x063b, 0x4689, 0x8a, 0x76, 0xb9, 0x50, 0xa1, 0xab, 0xe6, 0xe0);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.Assignment_test.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.Systematic_impact_levelReferencesTargets/Source.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.Systematic_impact_levelReferencesTargets/Source.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.Assignment_test.Systematic_impact_levelReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ba4bb29a-063b-4689-8a76-b950a1abe6e0")]
		public virtual Systematic_impact_level Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Systematic_impact_level)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a Systematic_impact_level
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Systematic_impact_level> GetSources(Systematic_impact_level element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Systematic_impact_level>, Systematic_impact_level>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xddff31be, 0x2946, 0x4cd9, 0x9d, 0x5c, 0xcd, 0x36, 0x40, 0x8a, 0x0c, 0x21);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.Assignment_test.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.Systematic_impact_levelReferencesTargets/Target.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.Systematic_impact_levelReferencesTargets/Target.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.Assignment_test.Systematic_impact_levelReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ddff31be-2946-4cd9-9d5c-cd36408a0c21")]
		public virtual Systematic_impact_level Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Systematic_impact_level)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a Systematic_impact_level
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Systematic_impact_level> GetTargets(Systematic_impact_level element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Systematic_impact_level>, Systematic_impact_level>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of Systematic_impact_levelReferencesTargets links to a Systematic_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets> GetLinksToTargets ( global::Company.Assignment_test.Systematic_impact_level sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets>(sourceInstance, global::Company.Assignment_test.Systematic_impact_levelReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of Systematic_impact_levelReferencesTargets links to a Systematic_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets> GetLinksToSources ( global::Company.Assignment_test.Systematic_impact_level targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets>(targetInstance, global::Company.Assignment_test.Systematic_impact_levelReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region Systematic_impact_levelReferencesTargets instance accessors
		
		/// <summary>
		/// Get any Systematic_impact_levelReferencesTargets links between a given Systematic_impact_level and a Systematic_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets> GetLinks( global::Company.Assignment_test.Systematic_impact_level source, global::Company.Assignment_test.Systematic_impact_level target )
		{
			global::System.Collections.Generic.List<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets>(source, global::Company.Assignment_test.Systematic_impact_levelReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.Assignment_test.Systematic_impact_levelReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Systematic_impact_levelReferencesTargets link between a given Systematic_impact_leveland a Systematic_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.Systematic_impact_levelReferencesTargets GetLink( global::Company.Assignment_test.Systematic_impact_level source, global::Company.Assignment_test.Systematic_impact_level target )
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Systematic_impact_levelReferencesTargets>(source, global::Company.Assignment_test.Systematic_impact_levelReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.Assignment_test.Systematic_impact_levelReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainRelationship Systematic_impact_levelHasEnabling_impact_level
	/// Description for
	/// Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("64632e47-8e56-47c3-b9ba-5f699a3d14f9")]
	public partial class Systematic_impact_levelHasEnabling_impact_level : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Systematic_impact_levelHasEnabling_impact_level domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x64632e47, 0x8e56, 0x47c3, 0xb9, 0xba, 0x5f, 0x69, 0x9a, 0x3d, 0x14, 0xf9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Systematic_impact_levelHasEnabling_impact_level link in the same Partition as the given Systematic_impact_level
		/// </summary>
		/// <param name="source">Systematic_impact_level to use as the source of the relationship.</param>
		/// <param name="target">Enabling_impact_level to use as the target of the relationship.</param>
		public Systematic_impact_levelHasEnabling_impact_level(Systematic_impact_level source, Enabling_impact_level target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Systematic_impact_levelHasEnabling_impact_level.Systematic_impact_levelDomainRoleId, source), new DslModeling::RoleAssignment(Systematic_impact_levelHasEnabling_impact_level.Enabling_impact_levelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Systematic_impact_levelHasEnabling_impact_level(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Systematic_impact_levelHasEnabling_impact_level(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Systematic_impact_levelHasEnabling_impact_level(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Systematic_impact_levelHasEnabling_impact_level(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Systematic_impact_level domain role code
		
		/// <summary>
		/// Systematic_impact_level domain role Id.
		/// </summary>
		public static readonly global::System.Guid Systematic_impact_levelDomainRoleId = new global::System.Guid(0x78d71c81, 0xbd39, 0x4df3, 0xbb, 0x2f, 0x7f, 0xb5, 0x44, 0xe5, 0xb3, 0x06);
		
		/// <summary>
		/// DomainRole Systematic_impact_level
		/// Description for
		/// Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Systematic_impact_level
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level/Systematic_impact_level.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level/Systematic_impact_level.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Enabling_impact_level", PropertyDisplayNameKey="Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level/Systematic_impact_level.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("78d71c81-bd39-4df3-bb2f-7fb544e5b306")]
		public virtual Systematic_impact_level Systematic_impact_level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Systematic_impact_level)DslModeling::DomainRoleInfo.GetRolePlayer(this, Systematic_impact_levelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, Systematic_impact_levelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Systematic_impact_level of a Enabling_impact_level
		/// <summary>
		/// Gets Systematic_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Systematic_impact_level GetSystematic_impact_level(Enabling_impact_level element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, Enabling_impact_levelDomainRoleId) as Systematic_impact_level;
		}
		
		/// <summary>
		/// Sets Systematic_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSystematic_impact_level(Enabling_impact_level element, Systematic_impact_level newSystematic_impact_level)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, Enabling_impact_levelDomainRoleId, newSystematic_impact_level);
		}
		#endregion
		#region Enabling_impact_level domain role code
		
		/// <summary>
		/// Enabling_impact_level domain role Id.
		/// </summary>
		public static readonly global::System.Guid Enabling_impact_levelDomainRoleId = new global::System.Guid(0xdd08f158, 0x6474, 0x4583, 0x9c, 0x10, 0x90, 0x6c, 0x08, 0x9f, 0xda, 0xba);
		
		/// <summary>
		/// DomainRole Enabling_impact_level
		/// Description for
		/// Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Enabling_impact_level
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level/Enabling_impact_level.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level/Enabling_impact_level.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Systematic_impact_level", PropertyDisplayNameKey="Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level/Enabling_impact_level.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("dd08f158-6474-4583-9c10-906c089fdaba")]
		public virtual Enabling_impact_level Enabling_impact_level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Enabling_impact_level)DslModeling::DomainRoleInfo.GetRolePlayer(this, Enabling_impact_levelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, Enabling_impact_levelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Enabling_impact_level of a Systematic_impact_level
		/// <summary>
		/// Gets Enabling_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Enabling_impact_level GetEnabling_impact_level(Systematic_impact_level element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, Systematic_impact_levelDomainRoleId) as Enabling_impact_level;
		}
		
		/// <summary>
		/// Sets Enabling_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEnabling_impact_level(Systematic_impact_level element, Enabling_impact_level newEnabling_impact_level)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, Systematic_impact_levelDomainRoleId, newEnabling_impact_level);
		}
		#endregion
		#region Systematic_impact_level link accessor
		/// <summary>
		/// Get the Systematic_impact_levelHasEnabling_impact_level link to a Systematic_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level GetLinkToEnabling_impact_level (global::Company.Assignment_test.Systematic_impact_level systematic_impact_levelInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level>(systematic_impact_levelInstance, global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Systematic_impact_levelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Systematic_impact_level not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Enabling_impact_level link accessor
		/// <summary>
		/// Get the Systematic_impact_levelHasEnabling_impact_level link to a Enabling_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level GetLinkToSystematic_impact_level (global::Company.Assignment_test.Enabling_impact_level enabling_impact_levelInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level>(enabling_impact_levelInstance, global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Enabling_impact_levelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Enabling_impact_level not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Systematic_impact_levelHasEnabling_impact_level instance accessors
		
		/// <summary>
		/// Get any Systematic_impact_levelHasEnabling_impact_level links between a given Systematic_impact_level and a Enabling_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level> GetLinks( global::Company.Assignment_test.Systematic_impact_level source, global::Company.Assignment_test.Enabling_impact_level target )
		{
			global::System.Collections.Generic.List<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level> outLinks = new global::System.Collections.Generic.List<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level>();
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level>(source, global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Systematic_impact_levelDomainRoleId);
			foreach ( global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level link in links )
			{
				if ( target.Equals(link.Enabling_impact_level) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Systematic_impact_levelHasEnabling_impact_level link between a given Systematic_impact_leveland a Enabling_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level GetLink( global::Company.Assignment_test.Systematic_impact_level source, global::Company.Assignment_test.Enabling_impact_level target )
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level>(source, global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level.Systematic_impact_levelDomainRoleId);
			foreach ( global::Company.Assignment_test.Systematic_impact_levelHasEnabling_impact_level link in links )
			{
				if ( target.Equals(link.Enabling_impact_level) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainRelationship Enabling_impact_levelHasImmediate_impact_level
	/// Description for
	/// Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e5879220-02dd-4287-b18d-1a317ed4a847")]
	public partial class Enabling_impact_levelHasImmediate_impact_level : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Enabling_impact_levelHasImmediate_impact_level domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe5879220, 0x02dd, 0x4287, 0xb1, 0x8d, 0x1a, 0x31, 0x7e, 0xd4, 0xa8, 0x47);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Enabling_impact_levelHasImmediate_impact_level link in the same Partition as the given Enabling_impact_level
		/// </summary>
		/// <param name="source">Enabling_impact_level to use as the source of the relationship.</param>
		/// <param name="target">Immediate_impact_level to use as the target of the relationship.</param>
		public Enabling_impact_levelHasImmediate_impact_level(Enabling_impact_level source, Immediate_impact_level target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Enabling_impact_levelHasImmediate_impact_level.Enabling_impact_levelDomainRoleId, source), new DslModeling::RoleAssignment(Enabling_impact_levelHasImmediate_impact_level.Immediate_impact_levelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Enabling_impact_levelHasImmediate_impact_level(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Enabling_impact_levelHasImmediate_impact_level(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Enabling_impact_levelHasImmediate_impact_level(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Enabling_impact_levelHasImmediate_impact_level(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Enabling_impact_level domain role code
		
		/// <summary>
		/// Enabling_impact_level domain role Id.
		/// </summary>
		public static readonly global::System.Guid Enabling_impact_levelDomainRoleId = new global::System.Guid(0x2d65cbd6, 0x9219, 0x49c9, 0xa3, 0xcd, 0x95, 0x96, 0x9b, 0x0b, 0x5e, 0x9f);
		
		/// <summary>
		/// DomainRole Enabling_impact_level
		/// Description for
		/// Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Enabling_impact_level
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level/Enabling_impact_level.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level/Enabling_impact_level.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Immediate_impact_level", PropertyDisplayNameKey="Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level/Enabling_impact_level.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2d65cbd6-9219-49c9-a3cd-95969b0b5e9f")]
		public virtual Enabling_impact_level Enabling_impact_level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Enabling_impact_level)DslModeling::DomainRoleInfo.GetRolePlayer(this, Enabling_impact_levelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, Enabling_impact_levelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Enabling_impact_level of a Immediate_impact_level
		/// <summary>
		/// Gets Enabling_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Enabling_impact_level GetEnabling_impact_level(Immediate_impact_level element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, Immediate_impact_levelDomainRoleId) as Enabling_impact_level;
		}
		
		/// <summary>
		/// Sets Enabling_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEnabling_impact_level(Immediate_impact_level element, Enabling_impact_level newEnabling_impact_level)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, Immediate_impact_levelDomainRoleId, newEnabling_impact_level);
		}
		#endregion
		#region Immediate_impact_level domain role code
		
		/// <summary>
		/// Immediate_impact_level domain role Id.
		/// </summary>
		public static readonly global::System.Guid Immediate_impact_levelDomainRoleId = new global::System.Guid(0xf769985e, 0x5e73, 0x499e, 0xb6, 0xa5, 0xe5, 0xf4, 0x6e, 0xd9, 0x09, 0xab);
		
		/// <summary>
		/// DomainRole Immediate_impact_level
		/// Description for
		/// Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Immediate_impact_level
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level/Immediate_impact_level.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level/Immediate_impact_level.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Enabling_impact_level", PropertyDisplayNameKey="Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level/Immediate_impact_level.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f769985e-5e73-499e-b6a5-e5f46ed909ab")]
		public virtual Immediate_impact_level Immediate_impact_level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Immediate_impact_level)DslModeling::DomainRoleInfo.GetRolePlayer(this, Immediate_impact_levelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, Immediate_impact_levelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Immediate_impact_level of a Enabling_impact_level
		/// <summary>
		/// Gets Immediate_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Immediate_impact_level GetImmediate_impact_level(Enabling_impact_level element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, Enabling_impact_levelDomainRoleId) as Immediate_impact_level;
		}
		
		/// <summary>
		/// Sets Immediate_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImmediate_impact_level(Enabling_impact_level element, Immediate_impact_level newImmediate_impact_level)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, Enabling_impact_levelDomainRoleId, newImmediate_impact_level);
		}
		#endregion
		#region Enabling_impact_level link accessor
		/// <summary>
		/// Get the Enabling_impact_levelHasImmediate_impact_level link to a Enabling_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level GetLinkToImmediate_impact_level (global::Company.Assignment_test.Enabling_impact_level enabling_impact_levelInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level>(enabling_impact_levelInstance, global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Enabling_impact_levelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Enabling_impact_level not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Immediate_impact_level link accessor
		/// <summary>
		/// Get the Enabling_impact_levelHasImmediate_impact_level link to a Immediate_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level GetLinkToEnabling_impact_level (global::Company.Assignment_test.Immediate_impact_level immediate_impact_levelInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level>(immediate_impact_levelInstance, global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Immediate_impact_levelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Immediate_impact_level not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Enabling_impact_levelHasImmediate_impact_level instance accessors
		
		/// <summary>
		/// Get any Enabling_impact_levelHasImmediate_impact_level links between a given Enabling_impact_level and a Immediate_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level> GetLinks( global::Company.Assignment_test.Enabling_impact_level source, global::Company.Assignment_test.Immediate_impact_level target )
		{
			global::System.Collections.Generic.List<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level> outLinks = new global::System.Collections.Generic.List<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level>();
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level>(source, global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Enabling_impact_levelDomainRoleId);
			foreach ( global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level link in links )
			{
				if ( target.Equals(link.Immediate_impact_level) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Enabling_impact_levelHasImmediate_impact_level link between a given Enabling_impact_leveland a Immediate_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level GetLink( global::Company.Assignment_test.Enabling_impact_level source, global::Company.Assignment_test.Immediate_impact_level target )
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level>(source, global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level.Enabling_impact_levelDomainRoleId);
			foreach ( global::Company.Assignment_test.Enabling_impact_levelHasImmediate_impact_level link in links )
			{
				if ( target.Equals(link.Immediate_impact_level) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainRelationship Immediate_impact_levelHasSolution_name
	/// Description for Company.Assignment_test.Immediate_impact_levelHasSolution_name
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.Immediate_impact_levelHasSolution_name.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.Immediate_impact_levelHasSolution_name.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7350f3ff-e475-436c-8b35-cfd8f3462a75")]
	public partial class Immediate_impact_levelHasSolution_name : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Immediate_impact_levelHasSolution_name domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7350f3ff, 0xe475, 0x436c, 0x8b, 0x35, 0xcf, 0xd8, 0xf3, 0x46, 0x2a, 0x75);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Immediate_impact_levelHasSolution_name link in the same Partition as the given Immediate_impact_level
		/// </summary>
		/// <param name="source">Immediate_impact_level to use as the source of the relationship.</param>
		/// <param name="target">Solution_name to use as the target of the relationship.</param>
		public Immediate_impact_levelHasSolution_name(Immediate_impact_level source, Solution_name target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Immediate_impact_levelHasSolution_name.Immediate_impact_levelDomainRoleId, source), new DslModeling::RoleAssignment(Immediate_impact_levelHasSolution_name.Solution_nameDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Immediate_impact_levelHasSolution_name(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Immediate_impact_levelHasSolution_name(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Immediate_impact_levelHasSolution_name(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Immediate_impact_levelHasSolution_name(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Immediate_impact_level domain role code
		
		/// <summary>
		/// Immediate_impact_level domain role Id.
		/// </summary>
		public static readonly global::System.Guid Immediate_impact_levelDomainRoleId = new global::System.Guid(0x38687b10, 0xd06a, 0x4f61, 0x93, 0x10, 0x20, 0x3f, 0x59, 0x89, 0xc0, 0xfe);
		
		/// <summary>
		/// DomainRole Immediate_impact_level
		/// Description for
		/// Company.Assignment_test.Immediate_impact_levelHasSolution_name.Immediate_impact_level
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.Immediate_impact_levelHasSolution_name/Immediate_impact_level.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.Immediate_impact_levelHasSolution_name/Immediate_impact_level.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Solution_name", PropertyDisplayNameKey="Company.Assignment_test.Immediate_impact_levelHasSolution_name/Immediate_impact_level.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("38687b10-d06a-4f61-9310-203f5989c0fe")]
		public virtual Immediate_impact_level Immediate_impact_level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Immediate_impact_level)DslModeling::DomainRoleInfo.GetRolePlayer(this, Immediate_impact_levelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, Immediate_impact_levelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Immediate_impact_level of a Solution_name
		/// <summary>
		/// Gets Immediate_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Immediate_impact_level GetImmediate_impact_level(Solution_name element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, Solution_nameDomainRoleId) as Immediate_impact_level;
		}
		
		/// <summary>
		/// Sets Immediate_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImmediate_impact_level(Solution_name element, Immediate_impact_level newImmediate_impact_level)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, Solution_nameDomainRoleId, newImmediate_impact_level);
		}
		#endregion
		#region Solution_name domain role code
		
		/// <summary>
		/// Solution_name domain role Id.
		/// </summary>
		public static readonly global::System.Guid Solution_nameDomainRoleId = new global::System.Guid(0x6723bcdb, 0xe341, 0x409c, 0xae, 0x9a, 0x35, 0x45, 0x8a, 0x9e, 0xd9, 0x23);
		
		/// <summary>
		/// DomainRole Solution_name
		/// Description for
		/// Company.Assignment_test.Immediate_impact_levelHasSolution_name.Solution_name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.Immediate_impact_levelHasSolution_name/Solution_name.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.Immediate_impact_levelHasSolution_name/Solution_name.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Immediate_impact_level", PropertyDisplayNameKey="Company.Assignment_test.Immediate_impact_levelHasSolution_name/Solution_name.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6723bcdb-e341-409c-ae9a-35458a9ed923")]
		public virtual Solution_name Solution_name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Solution_name)DslModeling::DomainRoleInfo.GetRolePlayer(this, Solution_nameDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, Solution_nameDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Solution_name of a Immediate_impact_level
		/// <summary>
		/// Gets a list of Solution_name.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Solution_name> GetSolution_name(Immediate_impact_level element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Solution_name>, Solution_name>(element, Immediate_impact_levelDomainRoleId);
		}
		#endregion
		#region Immediate_impact_level link accessor
		/// <summary>
		/// Get the list of Immediate_impact_levelHasSolution_name links to a Immediate_impact_level.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name> GetLinksToSolution_name ( global::Company.Assignment_test.Immediate_impact_level immediate_impact_levelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name>(immediate_impact_levelInstance, global::Company.Assignment_test.Immediate_impact_levelHasSolution_name.Immediate_impact_levelDomainRoleId);
		}
		#endregion
		#region Solution_name link accessor
		/// <summary>
		/// Get the Immediate_impact_levelHasSolution_name link to a Solution_name.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.Immediate_impact_levelHasSolution_name GetLinkToImmediate_impact_level (global::Company.Assignment_test.Solution_name solution_nameInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name>(solution_nameInstance, global::Company.Assignment_test.Immediate_impact_levelHasSolution_name.Solution_nameDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Solution_name not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Immediate_impact_levelHasSolution_name instance accessors
		
		/// <summary>
		/// Get any Immediate_impact_levelHasSolution_name links between a given Immediate_impact_level and a Solution_name.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name> GetLinks( global::Company.Assignment_test.Immediate_impact_level source, global::Company.Assignment_test.Solution_name target )
		{
			global::System.Collections.Generic.List<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name> outLinks = new global::System.Collections.Generic.List<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name>();
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name>(source, global::Company.Assignment_test.Immediate_impact_levelHasSolution_name.Immediate_impact_levelDomainRoleId);
			foreach ( global::Company.Assignment_test.Immediate_impact_levelHasSolution_name link in links )
			{
				if ( target.Equals(link.Solution_name) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Immediate_impact_levelHasSolution_name link between a given Immediate_impact_leveland a Solution_name.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.Immediate_impact_levelHasSolution_name GetLink( global::Company.Assignment_test.Immediate_impact_level source, global::Company.Assignment_test.Solution_name target )
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.Immediate_impact_levelHasSolution_name>(source, global::Company.Assignment_test.Immediate_impact_levelHasSolution_name.Immediate_impact_levelDomainRoleId);
			foreach ( global::Company.Assignment_test.Immediate_impact_levelHasSolution_name link in links )
			{
				if ( target.Equals(link.Solution_name) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Assignment_test
{
	/// <summary>
	/// DomainRelationship SoSAHasConcern
	/// Description for Company.Assignment_test.SoSAHasConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Assignment_test.SoSAHasConcern.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Assignment_test.SoSAHasConcern.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Assignment_test.Assignment_testDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("65eca63f-a1d2-4c0d-9b2d-00a847a6d63a")]
	public partial class SoSAHasConcern : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoSAHasConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x65eca63f, 0xa1d2, 0x4c0d, 0x9b, 0x2d, 0x00, 0xa8, 0x47, 0xa6, 0xd6, 0x3a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoSAHasConcern link in the same Partition as the given SoSA
		/// </summary>
		/// <param name="source">SoSA to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public SoSAHasConcern(SoSA source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoSAHasConcern.SoSADomainRoleId, source), new DslModeling::RoleAssignment(SoSAHasConcern.ConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasConcern(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasConcern(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSAHasConcern(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSAHasConcern(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoSA domain role code
		
		/// <summary>
		/// SoSA domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoSADomainRoleId = new global::System.Guid(0xa42cea06, 0xe333, 0x4404, 0xa9, 0xb4, 0x9d, 0xae, 0x34, 0xaf, 0x7b, 0x96);
		
		/// <summary>
		/// DomainRole SoSA
		/// Description for Company.Assignment_test.SoSAHasConcern.SoSA
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.SoSAHasConcern/SoSA.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.SoSAHasConcern/SoSA.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Concern", PropertyDisplayNameKey="Company.Assignment_test.SoSAHasConcern/SoSA.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a42cea06-e333-4404-a9b4-9dae34af7b96")]
		public virtual SoSA SoSA
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoSA)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoSADomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoSADomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoSA of a Concern
		/// <summary>
		/// Gets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoSA GetSoSA(Concern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcernDomainRoleId) as SoSA;
		}
		
		/// <summary>
		/// Sets SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoSA(Concern element, SoSA newSoSA)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcernDomainRoleId, newSoSA);
		}
		#endregion
		#region Concern domain role code
		
		/// <summary>
		/// Concern domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernDomainRoleId = new global::System.Guid(0xddd662c0, 0x28a3, 0x4056, 0xba, 0x5e, 0x6a, 0x9b, 0x29, 0xe0, 0xb9, 0x11);
		
		/// <summary>
		/// DomainRole Concern
		/// Description for Company.Assignment_test.SoSAHasConcern.Concern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Assignment_test.SoSAHasConcern/Concern.DisplayName", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Assignment_test.SoSAHasConcern/Concern.Description", typeof(global::Company.Assignment_test.Assignment_testDomainModel), "Company.Assignment_test.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoSA", PropertyDisplayNameKey="Company.Assignment_test.SoSAHasConcern/Concern.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ddd662c0-28a3-4056-ba5e-6a9b29e0b911")]
		public virtual Concern Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Concern of a SoSA
		/// <summary>
		/// Gets a list of Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetConcern(SoSA element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SoSADomainRoleId);
		}
		#endregion
		#region SoSA link accessor
		/// <summary>
		/// Get the list of SoSAHasConcern links to a SoSA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.SoSAHasConcern> GetLinksToConcern ( global::Company.Assignment_test.SoSA soSAInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.SoSAHasConcern>(soSAInstance, global::Company.Assignment_test.SoSAHasConcern.SoSADomainRoleId);
		}
		#endregion
		#region Concern link accessor
		/// <summary>
		/// Get the SoSAHasConcern link to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.SoSAHasConcern GetLinkToSoSA (global::Company.Assignment_test.Concern concernInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.SoSAHasConcern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.SoSAHasConcern>(concernInstance, global::Company.Assignment_test.SoSAHasConcern.ConcernDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concern not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoSAHasConcern instance accessors
		
		/// <summary>
		/// Get any SoSAHasConcern links between a given SoSA and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Assignment_test.SoSAHasConcern> GetLinks( global::Company.Assignment_test.SoSA source, global::Company.Assignment_test.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.Assignment_test.SoSAHasConcern> outLinks = new global::System.Collections.Generic.List<global::Company.Assignment_test.SoSAHasConcern>();
			global::System.Collections.Generic.IList<global::Company.Assignment_test.SoSAHasConcern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.SoSAHasConcern>(source, global::Company.Assignment_test.SoSAHasConcern.SoSADomainRoleId);
			foreach ( global::Company.Assignment_test.SoSAHasConcern link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoSAHasConcern link between a given SoSAand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Assignment_test.SoSAHasConcern GetLink( global::Company.Assignment_test.SoSA source, global::Company.Assignment_test.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.Assignment_test.SoSAHasConcern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Assignment_test.SoSAHasConcern>(source, global::Company.Assignment_test.SoSAHasConcern.SoSADomainRoleId);
			foreach ( global::Company.Assignment_test.SoSAHasConcern link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
